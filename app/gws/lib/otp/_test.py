import base64

import gws
import gws.lib.otp as otp
import gws.test.util as u


def test_hotp():
    # https://www.rfc-editor.org/rfc/rfc4226#appendix-D

    # The following test data uses the ASCII string
    # "12345678901234567890" for the secret:
    #
    # Table 2 details for each count the truncated values (both in
    # hexadecimal and decimal) and then the HOTP value.
    #
    # Truncated
    # Count    Hexadecimal    Decimal        HOTP
    # 0        4c93cf18       1284755224     755224
    # 1        41397eea       1094287082     287082
    # 2         82fef30        137359152     359152
    # 3        66ef7655       1726969429     969429
    # 4        61c5938a       1640338314     338314
    # 5        33c083d4        868254676     254676
    # 6        7256c032       1918287922     287922
    # 7         4e5b397         82162583     162583
    # 8        2823443f        673399871     399871
    # 9        2679dc69        645520489     520489
    #
    #
    #
    #
    #

    secret = '3132333435363738393031323334353637383930'
    r = [
        '755224',
        '287082',
        '359152',
        '969429',
        '338314',
        '254676',
        '287922',
        '162583',
        '399871',
        '520489',
    ]

    for c in range(10):
        key = bytes.fromhex(secret)
        a = otp.new_hotp(key, c)
        assert a == r.pop(0)


def test_totp():
    # https://www.rfc-editor.org/rfc/rfc6238#appendix-B

    # The test token shared secret uses the ASCII string value
    # "12345678901234567890".  With Time Step X = 30, and the Unix epoch as
    # the initial value to count time steps, where T0 = 0, the TOTP
    # algorithm will display the following values for specified modes and
    #     timestamps.
    #
    # +-------------+--------------+------------------+----------+--------+
    # |  Time (sec) |   UTC Time   | Value of T (hex) |   TOTP   |  Mode  |
    # +-------------+--------------+------------------+----------+--------+
    # |      59     |  1970-01-01  | 0000000000000001 | 94287082 |  SHA1  |
    # |             |   00:00:59   |                  |          |        |
    # |      59     |  1970-01-01  | 0000000000000001 | 46119246 | SHA256 |
    # |             |   00:00:59   |                  |          |        |
    # |      59     |  1970-01-01  | 0000000000000001 | 90693936 | SHA512 |
    # |             |   00:00:59   |                  |          |        |
    # |  1111111109 |  2005-03-18  | 00000000023523EC | 07081804 |  SHA1  |
    # |             |   01:58:29   |                  |          |        |
    # |  1111111109 |  2005-03-18  | 00000000023523EC | 68084774 | SHA256 |
    # |             |   01:58:29   |                  |          |        |
    # |  1111111109 |  2005-03-18  | 00000000023523EC | 25091201 | SHA512 |
    # |             |   01:58:29   |                  |          |        |
    # |  1111111111 |  2005-03-18  | 00000000023523ED | 14050471 |  SHA1  |
    # |             |   01:58:31   |                  |          |        |
    # |  1111111111 |  2005-03-18  | 00000000023523ED | 67062674 | SHA256 |
    # |             |   01:58:31   |                  |          |        |
    # |  1111111111 |  2005-03-18  | 00000000023523ED | 99943326 | SHA512 |
    # |             |   01:58:31   |                  |          |        |
    # |  1234567890 |  2009-02-13  | 000000000273EF07 | 89005924 |  SHA1  |
    # |             |   23:31:30   |                  |          |        |
    # |  1234567890 |  2009-02-13  | 000000000273EF07 | 91819424 | SHA256 |
    # |             |   23:31:30   |                  |          |        |
    # |  1234567890 |  2009-02-13  | 000000000273EF07 | 93441116 | SHA512 |
    # |             |   23:31:30   |                  |          |        |
    # |  2000000000 |  2033-05-18  | 0000000003F940AA | 69279037 |  SHA1  |
    # |             |   03:33:20   |                  |          |        |
    # |  2000000000 |  2033-05-18  | 0000000003F940AA | 90698825 | SHA256 |
    # |             |   03:33:20   |                  |          |        |
    # |  2000000000 |  2033-05-18  | 0000000003F940AA | 38618901 | SHA512 |
    # |             |   03:33:20   |                  |          |        |
    # | 20000000000 |  2603-10-11  | 0000000027BC86AA | 65353130 |  SHA1  |
    # |             |   11:33:20   |                  |          |        |
    # | 20000000000 |  2603-10-11  | 0000000027BC86AA | 77737706 | SHA256 |
    # |             |   11:33:20   |                  |          |        |
    # | 20000000000 |  2603-10-11  | 0000000027BC86AA | 47863826 | SHA512 |
    # |             |   11:33:20   |                  |          |        |
    # +-------------+--------------+------------------+----------+--------+

    seed = "3132333435363738393031323334353637383930"
    seed32 = (
            "3132333435363738393031323334353637383930" +
            "313233343536373839303132")
    seed64 = (
            "3132333435363738393031323334353637383930" +
            "3132333435363738393031323334353637383930" +
            "3132333435363738393031323334353637383930" +
            "31323334")

    r = [
        '94287082',
        '46119246',
        '90693936',
        '07081804',
        '68084774',
        '25091201',
        '14050471',
        '67062674',
        '99943326',
        '89005924',
        '91819424',
        '93441116',
        '69279037',
        '90698825',
        '38618901',
        '65353130',
        '77737706',
        '47863826',
    ]

    for ts in [59, 1111111109, 1111111111, 1234567890, 2000000000, 20000000000]:
        key = bytes.fromhex(seed)
        a = otp.new_totp(key, ts, 0, 30, 8, 'sha1')
        assert a == r.pop(0)

        key = bytes.fromhex(seed32)
        a = otp.new_totp(key, ts, 0, 30, 8, 'sha256')
        assert a == r.pop(0)

        key = bytes.fromhex(seed64)
        a = otp.new_totp(key, ts, 0, 30, 8, 'sha512')
        assert a == r.pop(0)
