class XmlNamespace(Data):
    """XML namespace."""

    uid: str
    """Unique ID."""
    xmlns: str
    """Default prefix for this Namespace."""
    uri: Url
    """Namespace uri."""
    schemaLocation: Url
    """Namespace schema location."""
    version: str
    """Namespace version."""
    isDefault: bool
    """Is this the default namespace for the given prefix."""
    extendsGml: bool
    """Namespace schema extends the GML3 schema."""


class XmlElement(Iterable):
    """XML Element.

    Extends ``ElementTree.Element`` (https://docs.python.org/3/library/xml.etree.elementtree.html#element-objects).
    """

    tag: str
    """Tag name, with an optional namespace in the Clark notation."""

    text: Optional[str]
    """Text before first subelement."""

    tail: Optional[str]
    """Text after this element's end tag."""

    attrib: dict
    """Dictionary of element attributes."""

    name: str
    """Element name (tag without a namespace)."""

    lcName: str
    """Element name (tag without a namespace) in lower case."""

    caseInsensitive: bool
    """Element is case-insensitive."""

    def __len__(self) -> int: ...

    def __iter__(self) -> Iterator['XmlElement']: ...

    def __getitem__(self, item: int) -> 'XmlElement': ...

    def append(self, subelement: 'XmlElement'):
        """Adds the element subelement to the end of this elementâ€™s internal list of subelements."""

    def attr(self, key: str, default=None):
        """Gets the element attribute named key."""

    def clear(self):
        """Resets an element."""

    def extend(self, subelements: Iterable['XmlElement']):
        """Appends subelements from a sequence object with zero or more elements."""

    def find(self, path: str) -> Optional['XmlElement']:
        """Finds first matching element by tag name or path."""

    def findall(self, path: str) -> list['XmlElement']:
        """Finds all matching subelements by name or path."""

    def findtext(self, path: str, default: Optional[str] = None) -> str:
        """Finds text for first matching element by name or path."""

    def get(self, key: str, default=None):
        """Gets the element attribute named key."""

    def insert(self, index: int, subelement: 'XmlElement'):
        """Inserts subelement at the given position in this element."""

    def items(self) -> Iterable[tuple[str, Any]]:
        """Returns the element attributes as a sequence of (name, value) pairs."""

    def iter(self, tag: Optional[str] = None) -> Iterable['XmlElement']:
        """Creates a tree iterator."""

    def iterfind(self, path: Optional[str] = None) -> Iterable['XmlElement']:
        """Returns an iterable of all matching subelements by name or path."""

    def itertext(self) -> Iterable[str]:
        """Creates a text iterator and returns all inner text."""

    def keys(self) -> Iterable[str]:
        """Returns the elements attribute names as a list."""

    def remove(self, other: 'XmlElement'):
        """Removes the other element from the element."""

    def set(self, key: str, value: Any):
        """Set the attribute key on the element to value."""

    # extensions

    def add(self, tag: str, attrib: Optional[dict] = None, **extra) -> 'XmlElement':
        """Creates a new element and adds it as a child.

        Args:
            tag: XML tag.
            attrib: XML attributes ``{key, value}``.
        """

    def children(self) -> list['XmlElement']:
        """Returns the children of the current element."""

    def findfirst(self, *paths) -> Optional['XmlElement']:
        """Given a list of paths, returns the first matching element."""

    def textof(self, *paths) -> str:
        """Given a list of paths, returns the text of the first matching element that has text."""

    def textlist(self, *paths, deep=False) -> list[str]:
        """Collects texts from child elements.

        Args:
            paths: List of paths to search for.
            deep: If ``False`` it only looks into direct children, otherwise search the entire subtree.

        Returns:
            A list containing all the text from the child-elements.
        """

    def textdict(self, *paths, deep=False) -> dict[str, str]:
        """Collects texts from child elements.

        Args:
            paths: List of paths to search for.
            deep: If ``False`` it only looks into direct children, otherwise search the entire subtree.

        Returns:
            A dict tag name -> text.
        """

    def to_string(
            self,
            extra_namespaces: Optional[list[XmlNamespace]] = None,
            xmlns_replacements: dict[str, str] = None,
            compact_whitespace: bool = False,
            remove_namespaces: bool = False,
            with_namespace_declarations: bool = False,
            with_schema_locations: bool = False,
            with_xml_declaration: bool = False,
    ) -> str:
        """Converts the Element object to a string.

        Args:
            extra_namespaces: Extra namespaces to add to the document.
            xmlns_replacements: A mapping of namespace UIDs to custom namespace prefixes.
            compact_whitespace: Remove all whitespace outside of tags and elements.
            remove_namespaces: Remove all namespace references.
            with_namespace_declarations: Include the namespace declarations.
            with_schema_locations: Include schema locations.
            with_xml_declaration: Include the xml declaration.

        Returns:
            An XML string.
        """

    def to_dict(self) -> dict:
        """Creates a dictionary from an XmlElement object."""

    def to_list(
            self,
            fold_tags: bool = True,
            remove_namespaces: bool = False,
    ) -> list:
        """Parse an XML element into a list of arguments (reverse of `gws.lib.xmlx.tag`).

        Args:
            fold_tags: If true, folds nested tag names into ``parent/child`` names.
            remove_namespaces: If true, removes all namespaces.
        """
