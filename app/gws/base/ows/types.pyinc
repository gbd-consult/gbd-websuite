import gws


class OwsProtocol(Enum):
    """Supported OWS protocol."""

    WMS = 'WMS'
    WMTS = 'WMTS'
    WCS = 'WCS'
    WFS = 'WFS'
    CSW = 'CSW'


class OwsAuthorization(Data):
    type: str
    username: str
    password: str


class OwsVerb(Enum):
    """OWS verb."""

    CreateStoredQuery = 'CreateStoredQuery'
    DescribeCoverage = 'DescribeCoverage'
    DescribeFeatureType = 'DescribeFeatureType'
    DescribeLayer = 'DescribeLayer'
    DescribeRecord = 'DescribeRecord'
    DescribeStoredQueries = 'DescribeStoredQueries'
    DropStoredQuery = 'DropStoredQuery'
    GetCapabilities = 'GetCapabilities'
    GetFeature = 'GetFeature'
    GetFeatureInfo = 'GetFeatureInfo'
    GetFeatureWithLock = 'GetFeatureWithLock'
    GetLegendGraphic = 'GetLegendGraphic'
    GetMap = 'GetMap'
    GetPrint = 'GetPrint'
    GetPropertyValue = 'GetPropertyValue'
    GetRecordById = 'GetRecordById'
    GetRecords = 'GetRecords'
    GetTile = 'GetTile'
    ListStoredQueries = 'ListStoredQueries'
    LockFeature = 'LockFeature'
    Transaction = 'Transaction'


class OwsOperation(Data):
    """OWS operation."""

    allowedParameters: dict[str, list[str]]
    constraints: dict[str, list[str]]
    formats: list[str]
    handlerName: str
    params: dict[str, str]
    postUrl: Url
    preferredFormat: str
    url: Url
    verb: OwsVerb


class OwsCapabilities(Data):
    """OWS capabilities structure."""

    metadata: 'Metadata'
    operations: list['OwsOperation']
    sourceLayers: list['SourceLayer']
    tileMatrixSets: list['TileMatrixSet']
    version: str


class OwsImageFormat(Data):
    mimeTypes: list[str]
    """Mime types for this format."""
    options: dict
    """Image options."""


class OwsService(Node):
    """OWS Service."""

    isRasterService: bool = False
    """Service provides raster services."""
    isVectorService: bool = False
    """Service provides vector services."""
    isOwsCommon: bool = False
    """Conforms to OGC Web Services Common Standard."""

    alwaysXY: bool
    """Force lon/lat order for geographic projections."""
    metadata: 'Metadata'
    """Service metadata."""
    name: str
    """Service name."""
    project: Optional['Project']
    """Project this service is configured for."""
    rootLayer: Optional['Layer']
    """Root layer of the service."""
    protocol: OwsProtocol
    """Supported protocol."""
    defaultFeatureCount: int
    """Default limit of features per page."""
    maxFeatureCount: int
    """Max limit of features per page."""
    searchTolerance: UomValue
    """Default tolerance for spatial search."""
    supportedBounds: list[Bounds]
    """Supported bounds."""
    supportedVersions: list[str]
    """Supported versions."""
    supportedOperations: list['OwsOperation']
    """Supported operations."""
    templates: list['Template']
    """Service templates."""
    imageFormats: list[OwsImageFormat]
    """Supported image formats."""
    updateSequence: str
    """Service update sequence."""
    withInspireMeta: bool
    """Include INSPIRE metadata."""
    withStrictParams: bool
    """Strict parameter checking."""

    def handle_request(self, req: 'WebRequester') -> ContentResponse:
        """Handle a service request."""

    def layer_is_suitable(self, layer: 'Layer') -> bool:
        """True if layer can be used in this service."""


class OwsProvider(Node):
    """OWS services Provider."""

    alwaysXY: bool
    authorization: Optional['OwsAuthorization']
    bounds: Optional[Bounds]
    forceCrs: 'Crs'
    maxRequests: int
    metadata: 'Metadata'
    operations: list['OwsOperation']
    protocol: 'OwsProtocol'
    sourceLayers: list['SourceLayer']
    url: Url
    version: str
    wgsExtent: Optional[Extent]

    def get_operation(self, verb: 'OwsVerb', method: Optional['RequestMethod'] = None) -> Optional['OwsOperation']: ...

    def get_features(self, args: 'SearchQuery', source_layers: list['SourceLayer']) -> list['FeatureRecord']: ...
