class SearchSort(Data):
    """Search sort specification."""

    fieldName: str
    reverse: bool


class SearchFilterOperator(Enum):
    """Search filter operator."""

    And = 'And'
    Or = 'Or'
    Not = 'Not'

    PropertyIsEqualTo = 'PropertyIsEqualTo'
    PropertyIsNotEqualTo = 'PropertyIsNotEqualTo'
    PropertyIsLessThan = 'PropertyIsLessThan'
    PropertyIsGreaterThan = 'PropertyIsGreaterThan'
    PropertyIsLessThanOrEqualTo = 'PropertyIsLessThanOrEqualTo'
    PropertyIsGreaterThanOrEqualTo = 'PropertyIsGreaterThanOrEqualTo'
    PropertyIsLike = 'PropertyIsLike'
    PropertyIsNull = 'PropertyIsNull'
    PropertyIsNil = 'PropertyIsNil'
    PropertyIsBetween = 'PropertyIsBetween'

    Equals = 'Equals'
    Disjoint = 'Disjoint'
    Touches = 'Touches'
    Within = 'Within'
    Overlaps = 'Overlaps'
    Crosses = 'Crosses'
    Intersects = 'Intersects'
    Contains = 'Contains'
    DWithin = 'DWithin'
    Beyond = 'Beyond'
    BBOX = 'BBOX'


class SearchFilterMatchAction(Enum):
    """Search filter match action."""

    All = 'All'
    Any = 'Any'
    One = 'One'


class SearchFilter(Data):
    """Search filter."""

    operator: SearchFilterOperator
    property: str
    value: str
    shape: 'Shape'
    subFilters: list['SearchFilter']
    matchCase: bool
    matchAction: SearchFilterMatchAction
    wildCard: str
    singleChar: str
    escapeChar: str


class SearchQuery(Data):
    """Search query."""

    access: Access
    all: bool
    bounds: Bounds
    extraColumns: list
    extraParams: dict
    extraWhere: list
    keyword: str
    layers: list['Layer']
    limit: int
    filter: SearchFilter
    project: 'Project'
    relDepth: int
    resolution: float
    shape: 'Shape'
    sort: list[SearchSort]
    tolerance: 'UomValue'
    uids: list[str]


class SearchResult(Data):
    """Search result."""

    feature: 'Feature'
    layer: 'Layer'
    finder: 'Finder'


class TextSearchType(Enum):
    """Text search type."""

    exact = 'exact'
    """Match the whole string."""
    begin = 'begin'
    """Match the beginning of the string."""
    end = 'end'
    """Match the end of the string."""
    any = 'any'
    """Match any substring."""
    like = 'like'
    """Use the percent sign as a placeholder."""


class TextSearchOptions(Data):
    """Text search options."""

    type: TextSearchType
    """Type of the search."""
    minLength: int = 0
    """Minimal pattern length."""
    caseSensitive: bool = False
    """Use the case sensitive search."""


class SortOptions(Data):
    """Sort options."""

    fieldName: str
    """Field name to sort by."""
    reverse: bool = False
    """Sort in reverse order."""


class SearchManager(Node):
    """Search Manager."""

    def run_search(self, search: 'SearchQuery', user: 'User') -> list['SearchResult']: ...


class Finder(Node):
    """Finder object."""

    title: str

    supportsFilterSearch: bool = False
    supportsGeometrySearch: bool = False
    supportsKeywordSearch: bool = False

    withFilter: bool
    withGeometry: bool
    withKeyword: bool

    templates: list['Template']
    models: list['Model']
    sourceLayers: list['SourceLayer']

    tolerance: 'UomValue'

    def run(self, search: SearchQuery, user: 'User', layer: Optional['Layer'] = None) -> list['Feature']: ...

    def can_run(self, search: SearchQuery, user: 'User') -> bool: ...
