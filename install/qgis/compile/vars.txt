// helper file for changing cmake vars easily
// generated by 'python3 /COMPILE/list-vars.py'
// after changing this, run 'python3 /COMPILE/make-scripts.py' to generate scripts
//
// VARIABLE=our_value // (default)

BINDINGS_GLOBAL_INSTALL=FALSE // (FALSE) Install bindings to global python directory? (might need root)
BUILD_TESTING=OFF // (ON) Build the testing tree.
BUILD_WITH_QT6=FALSE // (FALSE) Enable (broken, experimental) Qt6 support
CMAKE_ENABLE=ON // (ON) Enable automatic path configuration
CMAKE_SKIP_RPATH=NO // (NO) If set, runtime paths are not added when using shared libraries.
CMAKE_VERBOSE_MAKEFILE=TRUE // (FALSE) If this value is on, makefiles will be generated without the .SILENT directive, and all commands will be echoed to the console during the make.  This is useful for debugging only. With Visual Studio IDE projects all commands are done without /nologo.
CPACK_BINARY_DEB=OFF // (OFF) Enable to build Debian packages
CPACK_BINARY_FREEBSD=OFF // (OFF) Enable to build FreeBSD packages
CPACK_BINARY_IFW=OFF // (OFF) Enable to build IFW packages
CPACK_BINARY_NSIS=OFF // (OFF) Enable to build NSIS packages
CPACK_BINARY_RPM=OFF // (OFF) Enable to build RPM packages
CPACK_BINARY_STGZ=OFF // (ON) Enable to build STGZ packages
CPACK_BINARY_TBZ2=OFF // (OFF) Enable to build TBZ2 packages
CPACK_BINARY_TGZ=OFF // (ON) Enable to build TGZ packages
CPACK_BINARY_TXZ=OFF // (OFF) Enable to build TXZ packages
CPACK_BINARY_TZ=OFF // (ON) Enable to build TZ packages
CPACK_SOURCE_RPM=OFF // (OFF) Enable to build RPM source packages
CPACK_SOURCE_TBZ2=OFF // (ON) Enable to build TBZ2 source packages
CPACK_SOURCE_TGZ=OFF // (ON) Enable to build TGZ source packages
CPACK_SOURCE_TXZ=OFF // (ON) Enable to build TXZ source packages
CPACK_SOURCE_TZ=OFF // (ON) Enable to build TZ source packages
CPACK_SOURCE_ZIP=OFF // (OFF) Enable to build ZIP source packages
DART_BUILD_WARNING_REPORT_LIMIT=OFF // (OFF) Limit of reported warnings, -1 reports all.
DART_VERBOSE_BUILD=OFF // (OFF) Show the actual output of the build, or if off show a . for each 1024 bytes.
DELIVER_CONTINUOUS_EMAIL=Off // (Off) Should Dart server send email when build errors are found in Continuous builds?
DISABLE_DEPRECATED=FALSE // (FALSE) If set to true, it will disable deprecated functionality to prepare for the next generation of QGIS
ENABLE_COVERAGE=FALSE // (FALSE) Perform coverage tests?
ENABLE_HANATEST=FALSE // (FALSE) Enable HANA provider tests
ENABLE_LOCAL_BUILD_SHORTCUTS=TRUE // (FALSE) Disables some build steps which are only relevant for releases to speed up compilation time for development
ENABLE_MODELTEST=FALSE // (FALSE) Enable QT ModelTest (not for production)
ENABLE_MSSQLTEST=FALSE // (FALSE) Enable MSSQL provider tests
ENABLE_MSSQLTEST_CPP=FALSE // (FALSE) Enable MSSQL provider C++ tests
ENABLE_ORACLETEST=FALSE // (FALSE) Enable Oracle provider tests
ENABLE_PGTEST=FALSE // (FALSE) Enable PostgreSQL provider tests
ENABLE_SAGA_TESTS=FALSE // (FALSE) Enable SAGA tests
ENABLE_TESTS=FALSE // (TRUE) Build unit tests?
FORCE_STATIC_LIBS=FALSE // (FALSE) Determines whether libraries should be static only
GENERATE_COVERAGE_DOCS=FALSE // (FALSE) Generate coverage docs (requires lcov)?
HAS_KDE_QT5_FONT_STRETCH_FIX=FALSE // (FALSE) Using KDE's Qt 5.15 fork with the QFont stretch fix
HAS_KDE_QT5_PDF_TRANSFORM_FIX=FALSE // (FALSE) Using KDE's Qt 5.15 fork with the PDF brush transform fix
HAS_KDE_QT5_SMALL_CAPS_FIX=FALSE // (FALSE) Using KDE's Qt 5.15 fork with the QFont::SmallCaps fix
PEDANTIC=FALSE // (TRUE) Determines if we should compile in pedantic mode.
PUSH_TO_CDASH=FALSE // (FALSE) Determines whether test results should be pushed to CDASH site
QGIS_INSTALL_SYS_LIBS=TRUE // (TRUE) If set to TRUE install all required system libs in the output package
SIP_GLOBAL_INSTALL=FALSE // (FALSE) Install sip source files to system sip directory? (might need root)
USE_CCACHE=ON // (ON) Use ccache
USE_OPENCL=ON // (ON) Use OpenCL
WERROR=FALSE // (FALSE) Treat build warnings as errors.
WITH_3D=FALSE // (FALSE) Determines whether QGIS 3D library should be built
WITH_ANALYSIS=FALSE // (TRUE) Determines whether QGIS analysis library should be built
WITH_APIDOC=FALSE // (FALSE) Determines whether the QGIS API doxygen documentation should be built
WITH_ASAN=FALSE // (FALSE) Use AddressSanitizer
WITH_ASTYLE=FALSE // (FALSE) If you plan to contribute you should reindent with scripts/prepare_commit.sh (using 'our' astyle)
WITH_AUTH=TRUE // (TRUE) Determines whether QGIS authentication methods should be built
WITH_BINDINGS=TRUE // (TRUE) Determines whether python bindings should be built
WITH_CLAZY=FALSE // (FALSE) Determines whether Clazy checks should be enabled
WITH_COPC=FALSE // (TRUE) Determines whether Cloud Optimized Point Cloud (COPC) support should be built
WITH_CORE=TRUE // (TRUE) Determines whether QGIS core should be built.
WITH_CRASH_HANDLER=FALSE // (TRUE) Determines whether the QGIS crash handler application should be built
WITH_CUSTOM_WIDGETS=FALSE // (FALSE) Determines whether QGIS custom widgets for Qt Designer should be built
WITH_DESKTOP=FALSE // (TRUE) Determines whether QGIS desktop should be built
WITH_EPT=FALSE // (TRUE) Determines whether Entwine Point Cloud (EPT) support should be built
WITH_GRASS7=FALSE // (TRUE) Determines whether GRASS 7 plugin should be built
WITH_GRASS8=FALSE // (TRUE) Determines whether GRASS 8 plugin should be built
WITH_GSL=FALSE // (TRUE) Determines whether GSL library should be used
WITH_GUI=TRUE // (TRUE) Determines whether QGIS GUI library (and everything built on top of it) should be built
WITH_HANA=FALSE // (FALSE) Determines whether SAP HANA Spatial support should be built
WITH_INTERNAL_LAZPERF=TRUE // (TRUE) Determines whether LazPerf should be built from internal copy
WITH_INTERNAL_MDAL=TRUE // (TRUE) Determines whether MDAL should be built from internal copy
WITH_INTERNAL_O2=ON // (ON) Download and locally include source of o2 library
WITH_INTERNAL_POLY2TRI=TRUE // (TRUE) Determines whether POLY2TRI should be built from internal copy
WITH_OAUTH2_PLUGIN=FALSE // (TRUE) Build OAuth2 authentication method plugin
WITH_ORACLE=FALSE // (FALSE) Determines whether Oracle support should be built
WITH_PDAL=FALSE // (FALSE) Determines whether PDAL support should be built
WITH_POSTGRESQL=TRUE // (TRUE) Determines whether POSTGRESQL support should be built
WITH_PY_COMPILE=FALSE // (FALSE) Determines whether Python modules in staged or installed locations are byte-compiled
WITH_QGIS_PROCESS=FALSE // (TRUE) Determines whether the standalone "qgis_process" tool should be built
WITH_QSCIAPI=FALSE // (TRUE) Whether to generate PyQGIS QScintilla2 API file. (For devs) run 'make qsci-pap-src' in between QGIS build and install to regenerate .pap file in source tree for console auto-completion.
WITH_QSPATIALITE=TRUE // (FALSE) Determines whether QSPATIALITE sql driver should be built
WITH_QT5SERIALPORT=FALSE // (TRUE) Determines whether Qt5SerialPort should be tried for GPS positioning
WITH_QTWEBKIT=TRUE // (TRUE) Enable QtWebkit support
WITH_QUICK=FALSE // (FALSE) Determines whether QGIS Quick library should be built
WITH_QWTPOLAR=FALSE // (FALSE) Determines whether QwtPolar should be built
WITH_SERVER=TRUE // (FALSE) Determines whether QGIS server should be built
WITH_SPATIALITE=TRUE // (TRUE) Determines whether Spatialite support should be built (required for spatialite, virtual, wfs providers)
WITH_STAGED_PLUGINS=FALSE // (TRUE) Stage-install core Python plugins to run from build directory? (utilities and console are always staged)
WITH_THREAD_LOCAL=TRUE // (TRUE) Determines whether std::thread_local should be used
