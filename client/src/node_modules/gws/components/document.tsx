import * as React from 'react';

import * as types from '../types';
import * as api from '../core/gws-api';
import * as ui from '../ui';
import * as tools from '../tools';
import * as featureComp from './feature';
import * as listComp from './list';

let {Row, Cell} = ui.Layout;

const MIME_STYLES = {
    'text/csv': 'csv',
    'application/pdf': 'pdf',
    'text/plain': 'txt',
    'application/zip': 'zip',
    'application/msword': 'doc',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'doc',
    'application/vnd.ms-excel': 'xls',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'xls',
    'application/vnd.ms-powerpoint': 'ppt',
    'application/vnd.openxmlformats-officedocument.presentationml.presentation': 'ppt',
};

const MIME_WITH_PREVIEW = [
    'image/jpeg',
    'image/png',
];


export interface DocumentItem {
    uid: string;
    mime?: string;
    label?: string;
    previewUrl?: string;
    downloadUrl?: string;
}

interface DocumentProps extends types.ViewProps {
    document: DocumentItem;
    whenTouched?: () => void;
    className?: string;

}


export class Document extends React.PureComponent<DocumentProps> {
    render() {
        let doc = this.props.document;
        let content = null;
        let label = doc.label || '';

        if (doc.previewUrl) {
            let u = doc.previewUrl + '/projectUid/' + this.props.controller.app.project.uid;
            content = <img src={u} alt={label}/>;
        }

        let touched = this.props.whenTouched || (() => null);

        return <div
            {...tools.cls(
                'cmpDocument',
                'cmpDocument_' + (MIME_STYLES[doc.mime] || 'any'),
                this.props.className,
            )}
            title={label}
        >
            <div className="cmpDocumentContent" onClick={touched}>
                {content}
            </div>
            <div className="cmpDocumentLabel" onClick={touched}>
                {label}
            </div>
        </div>
    }

}


interface DocumentListProps extends types.ViewProps {
    documents: Array<DocumentItem>;
    layout?: 'row' | 'grid';
    className?: string;
    whenTouched?: (it: DocumentItem) => void;
    isSelected?: (it: DocumentItem) => boolean;

}

export class DocumentList extends React.PureComponent<DocumentListProps> {
    render() {
        let touched = this.props.whenTouched || (it => null);
        let selected = this.props.isSelected || (it => false);
        let layout = this.props.layout === 'grid' ? 'cmpDocumentListGrid' : 'cmpDocumentListRow';

        return <div {...tools.cls('cmpDocumentList', layout, this.props.className)}>
            <div className="cmpDocumentListInner">
                {this.props.documents.map(doc => <Document
                    key={doc.uid}
                    controller={this.props.controller}
                    document={doc}
                    className={selected(doc) && 'isSelected'}
                    whenTouched={() => touched(doc)}
                />)}
            </div>
        </div>
    }
}
