@import gws

@let LOG = 'syslog:server=unix:/dev/log,nohostname,tag=NGINX'

@let LOG_LEVEL = 'info'
@if root.app.developer_option('nginx.log_level_debug')
    @let LOG_LEVEL = 'debug'
@end

@let SSL_CRT = root.app.cfg('web.ssl.crt')
@let SSL_KEY = root.app.cfg('web.ssl.key')
@let SSL_HSTS = root.app.cfg('web.ssl.hsts')

@let UWSGI_PARAMS
    uwsgi_param QUERY_STRING $query_string;
    uwsgi_param REQUEST_METHOD $request_method;
    uwsgi_param CONTENT_TYPE $content_type;
    uwsgi_param CONTENT_LENGTH $content_length;
    uwsgi_param REQUEST_URI $request_uri;
    uwsgi_param PATH_INFO $document_uri;
    uwsgi_param DOCUMENT_ROOT $document_root;
    uwsgi_param SERVER_PROTOCOL $server_protocol;
    uwsgi_param REMOTE_ADDR $remote_addr;
    uwsgi_param REMOTE_PORT $remote_port;
    uwsgi_param SERVER_ADDR $server_addr;
    uwsgi_param SERVER_PORT $server_port;
    uwsgi_param SERVER_NAME $server_name;
    uwsgi_param HTTPS $https;
@end

@let GZIP
    gzip on;

    @# NB don't include xml (some WMS clients don't understand gzip)
    @# text/xml application/xml application/xml+rss
    gzip_types text/plain text/css application/json application/javascript text/javascript;


    @# gzip_vary on;
    @# gzip_proxied any;
    @# gzip_comp_level 6;
    @# gzip_buffers 16 8k;
    @# gzip_http_version 1.1;
@end

@let WEB
    error_log {LOG} {LOG_LEVEL};
    access_log {LOG} apm;

    @if root.app.developer_option('nginx.rewrite_log_on')
        rewrite_log on;
    @end

    client_max_body_size {root.app.cfg('server.web.maxRequestLength')}m;
    client_body_buffer_size 4m;
    client_body_temp_path {gws.u.ensure_dir(gws.c.TMP_DIR + '/nginx')};

    @for site in root.app.webMgr.sites
        @for r in site.rewriteRules
            @if not r.reversed
                rewrite {r.pattern} {r.target} last;
            @end
        @end
    @end

    @for site in root.app.webMgr.sites
        location / {
            root {site.staticRoot.dir};
            try_files $uri $uri/index.html @cache;
        }
        location = /favicon.ico {
            root /;
            try_files {site.staticRoot.dir}$uri {gws.c.APP_DIR}/gws/base/web/favicon.ico =404;
        }
    @end

    location @cache {
        root {gws.c.FASTCACHE_DIR};
        try_files $uri @app;
    }

    location @app {
        uwsgi_pass unix://{webSocket};
        uwsgi_read_timeout {root.app.cfg('server.web.timeout')};
        {UWSGI_PARAMS}
    }
@end

worker_processes auto;
pid {nginxPid};
user {userName} {groupName};

events {
    worker_connections 768;
}

@if inContainer
    daemon off;
@end

error_log {LOG} {LOG_LEVEL};

http {
    log_format apm '$remote_addr'
                   ' method=$request_method request="$request"'
                   ' request_length=$request_length'
                   ' status=$status bytes_sent=$bytes_sent'
                   ' referer=$http_referer'
                   ' user_agent="$http_user_agent"'
                   ' request_time=$request_time'
                   ' upstream_response_time=$upstream_response_time'
                   ' upstream_connect_time=$upstream_connect_time'
                   ' upstream_header_time=$upstream_header_time';

    access_log {LOG};

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;

    @if SSL_CRT
        server {
            listen 80 default_server;
            server_name gws;
            return 301 https://$host$request_uri;
        }

        server {
            listen 443 ssl default_server;
            server_name gws;

            ssl_certificate     {SSL_CRT};
            ssl_certificate_key {SSL_KEY};

            @if SSL_HSTS
                add_header Strict-Transport-Security "max-age={SSL_HSTS}; includeSubdomains";
            @end

            {GZIP}
            {WEB}
        }
    @else
        server {
            listen 80 default_server;
            server_name gws;

            {GZIP}
            {WEB}
        }
    @end
}
