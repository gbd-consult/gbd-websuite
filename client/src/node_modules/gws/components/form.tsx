import * as React from 'react';

import * as types from '../types';
import * as api from '../core/gws-api';
import * as ui from '../ui';
import * as tools from '../tools';
import * as featureComp from './feature';
import * as listComp from './list';
import * as widget from './widget';

let {Row, Cell} = ui.Layout;


interface FormProps {
    controller: types.IController;
    model: types.IModel;
    feature: types.IFeature;
    values: types.Dict;
    errors?: types.Dict;
    makeWidget: (field: types.IModelField, feature: types.IFeature, values: types.Dict) => React.ReactElement | null;
}


//

//


export class Form extends React.PureComponent<FormProps> {

    renderField(field: types.IModelField) {
        let cc = this.props.controller;

        let widget = this.props.makeWidget(field, this.props.feature, this.props.values);
        if (!widget)
            return null;

        let err = this.props.errors ? this.props.errors[field.name] : null;


        return <React.Fragment key={field.name}>
            <tr className={err ? 'isError' : ''}>
                <th>
                    {field.title}
                </th>
                <td>
                    {widget}
                </td>
            </tr>
            <tr {...tools.cls('cmpFormError', err && 'isActive')}>
                <th>&nbsp;</th>
                <td>{err}</td>
            </tr>
        </React.Fragment>

    }

    render() {
        return <table className="cmpForm">
            <tbody>
            {this.props.model.fields.map(f => this.renderField(f))}
            </tbody>
        </table>
    }
}
