class Locale(Data):
    """Locale data."""

    uid: str
    dateFormatLong: str
    dateFormatMedium: str
    dateFormatShort: str
    dateUnits: str
    """date unit names, e.g. 'YMD' for 'en', 'JMT' for 'de'"""
    dayNamesLong: list[str]
    dayNamesShort: list[str]
    dayNamesNarrow: list[str]
    firstWeekDay: int

    language: str
    """Language code: ``de``"""
    language3: str
    """ISO 3166-1 alpha-3 language code: ``deu``."""
    languageBib: str
    """Bibliographic language code.."""
    languageName: str
    """Native language name: ``Deutsch``."""
    languageNameEn: str
    """English language name: ``German``."""

    territory: str
    territoryName: str
    monthNamesLong: list[str]
    monthNamesShort: list[str]
    monthNamesNarrow: list[str]
    numberDecimal: str
    numberGroup: str


class DateTimeFormat(Enum):
    """Enumeration indicating the length of the date/time format."""
    short = 'short'
    """Local short format."""
    medium = 'medium'
    """Local medium format."""
    long = 'long'
    """Local long format."""
    iso = 'iso'
    """ISO 8601 format."""


class NumberFormat(Enum):
    """Enumeration indicating the number format."""
    decimal = 'decimal'
    """Locale decimal format."""
    grouped = 'grouped'
    """Locale grouped format."""
    currency = 'currency'
    """Locale currency format"""
    percent = 'percent'
    """Locale percent format."""


class DateFormatter:
    """Locale-aware date formatter."""

    def format(self, fmt: DateTimeFormat | str, date: Optional[Union['datetime.date', str]] = None) -> str:
        """Formats the date.

        Args:
            fmt: Format type or a `strftime` format string
            date: Date, if none is given the current date will be used as default.

        Returns:
            A formatted date string.
        """

    def short(self, date=None) -> str:
        """Returns the date in the short format ``11.12.13``."""

    def medium(self, date=None) -> str:
        """Returns the date in the medium format ``11.12.2013``."""

    def long(self, date=None) -> str:
        """Returns the date in the medium format ``11. Dezember 2013``."""

    def iso(self, date=None) -> str:
        """Returns the date in the ISO 8601 format ``2013-12-11``."""


class TimeFormatter:
    """Locale-aware time formatter."""

    def format(self, fmt: DateTimeFormat | str, time: Optional[Union['datetime.time', str]] = None) -> str:
        """Formats the time.

        Args:
            fmt: Format type or a `strftime` format string
            time: Time, if none is given the current time will be used as default.

        Returns:
            A formatted time string.
        """

    def short(self, time=None) -> str:
        """Returns the time in the short format ``11:22``."""

    def medium(self, time=None) -> str:
        """Returns the time in the medium format ``11:22:33``."""

    def long(self, time=None) -> str:
        """Returns the time in the medium format ``11:22:33``."""

    def iso(self, time=None) -> str:
        """Returns the time and date in the ISO 8601 format."""


class NumberFormatter:
    """Locale-aware number formatter."""

    def format(self, fmt: NumberFormat | str, n, *args, **kwargs) -> str:
        """Formats the number with respect to the locale.

        Args:
            fmt: Format type or a python `format` string
            n: Number.
            kwargs: Passes the currency parameter forward.

        Returns:
            A formatted number.
        """

    def decimal(self, n, *args, **kwargs) -> str:
        """Returns formatted decimal value."""

    def grouped(self, n, *args, **kwargs) -> str:
        """Returns formatted decimal value with group separators."""

    def currency(self, n, currency: str, *args, **kwargs) -> str:
        """Returns formatted currency value."""

    def percent(self, n, *args, **kwargs) -> str:
        """Returns formatted percent value."""
