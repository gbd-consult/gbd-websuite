class TemplateArgs(Data):
    """Template arguments."""

    app: 'Application'
    """Application object."""
    gwsVersion: str
    """GWS version. (deprecated in 8.1)"""
    gwsBaseUrl: str
    """GWS server base url. (deprecated in 8.1)"""
    locale: 'Locale'
    """Current locale."""
    date: 'DateFormatter'
    """Locale-aware date formatter."""
    time: 'TimeFormatter'
    """Locale-aware time formatter."""
    number: 'NumberFormatter'
    """Locale-aware number formatter."""


class TemplateRenderInput(Data):
    """Template render input."""

    args: dict | Data
    crs: 'Crs'
    dpi: int
    locale: 'Locale'
    maps: list[MapRenderInput]
    mimeOut: str
    notify: Callable
    project: 'Project'
    user: 'User'


class TemplateQualityLevel(Data):
    """Template quality level."""

    name: str
    """Quality level name."""
    dpi: int
    """DPI for the quality level."""


class Template(Node):
    """Template object."""

    mapSize: UomSize
    """Default map size for the template."""
    mimeTypes: list[str]
    """MIME types the template can generate."""
    pageSize: UomSize
    """Default page size for printing."""
    pageMargin: UomExtent
    """Default page margin for printing."""
    subject: str
    """Template subject (category)."""
    title: str
    """Template title."""

    def render(self, tri: TemplateRenderInput) -> ContentResponse:
        """Render the template and return the generated response."""


class TemplateManager(Node):
    """Template manager."""

    def find_templates(self, subjects: list[str], where: list[Node], user: 'User' = None, mime: str = None) -> list['Template']: ...

    def find_template(self, subject: str, where: list[Node], user: 'User' = None, mime: str = None) -> Optional['Template']: ...

    def template_from_path(self, path: str) -> Optional['Template']: ...
