
class DatabaseModel(Model):
    """Database-based data model."""

    db: 'DatabaseProvider'
    sqlFilter: str
    tableName: str

    def table(self) -> 'sqlalchemy.Table': ...

    def column(self, column_name: str) -> 'sqlalchemy.Column': ...

    def uid_column(self) -> 'sqlalchemy.Column': ...




class ColumnDescription(Data):
    """Database column description."""

    columnIndex: int
    comment: str
    default: str
    geometrySrid: int
    geometryType: GeometryType
    isAutoincrement: bool
    isNullable: bool
    isPrimaryKey: bool
    isUnique: bool
    hasDefault: bool
    name: str
    nativeType: str
    options: dict
    type: AttributeType


class RelationshipDescription(Data):
    """Database relationship description."""

    name: str
    schema: str
    fullName: str
    foreignKeys: str
    referredKeys: str


class DataSetDescription(Data):
    """Description of a database Table or a GDAL Dataset."""

    columns: list[ColumnDescription]
    columnMap: dict[str, ColumnDescription]
    fullName: str
    geometryName: str
    geometrySrid: int
    geometryType: GeometryType
    name: str
    schema: str


class DatabaseManager(Node):
    """Database manager."""

    providers: list['DatabaseProvider']

    def create_provider(self, cfg: Config, **kwargs) -> 'DatabaseProvider': ...

    def find_provider(self, uid: Optional[str] = None, ext_type: Optional[str] = None) -> Optional['DatabaseProvider']: ...


DatabaseTableAlike: TypeAlias = Union['sqlalchemy.Table', str]
"""SA ``Table`` object or a string table name."""


class DatabaseProvider(Node):
    """Database Provider.

    A database Provider wraps SQLAlchemy ``Engine`` and ``Connection`` objects
    and provides common db functionality.
    """

    url: str
    """Connection url."""

    def column(self, table: DatabaseTableAlike, column_name: str) -> 'sqlalchemy.Column':
        """SA ``Column`` object for a specific column."""

    def connect(self) -> ContextManager['sqlalchemy.Connection']:
        """Context manager for a SA ``Connection``.

        Context calls to this method can be nested. An inner call is a no-op, as no new connection is created.
        Only the outermost connection is closed upon exit::

            with db.connect():
                ...
                with db.connect(): # no-op
                    ...
                # connection remains open
                ...
            # connection closed
        """

    def describe(self, table: DatabaseTableAlike) -> 'DataSetDescription':
        """Describe a table."""

    def count(self, table: DatabaseTableAlike) -> int:
        """Return table record count or 0 if the table does not exist."""

    def engine(self, **kwargs) -> 'sqlalchemy.Engine':
        """SA ``Engine`` object for this provider."""

    def has_column(self, table: DatabaseTableAlike, column_name: str) -> bool:
        """Check if a specific column exists."""

    def has_table(self, table_name: str) -> bool:
        """Check if a specific table exists."""

    def join_table_name(self, schema: str, name: str) -> str:
        """Create a full table name from the schema and table names."""

    def split_table_name(self, table_name: str) -> tuple[str, str]:
        """Split a full table name into the schema and table names."""

    def table(self, table_name: str, **kwargs) -> 'sqlalchemy.Table':
        """SA ``Table`` object for a specific table."""

    def table_bounds(self, table: DatabaseTableAlike) -> Optional[Bounds]:
        """Compute a bounding box for the table primary geometry."""

    def select_text(self, sql: str, **kwargs) -> list[dict]:
        """Execute a textual SELECT statement and return a list of record dicts."""

    def execute_text(self, sql: str, **kwargs) -> 'sqlalchemy.CursorResult':
        """Execute a textual DML statement and return a result."""
