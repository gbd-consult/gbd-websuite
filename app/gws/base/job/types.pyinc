class JobTerminated(Exception):
    pass


class JobState(Enum):
    """Background job state."""

    init = 'init'
    """The job is being created."""
    open = 'open'
    """The job is just created and waiting for start."""
    running = 'running'
    """The job is running."""
    complete = 'complete'
    """The job has been completed successfully."""
    error = 'error'
    """There was an error."""
    cancel = 'cancel'
    """The job was cancelled."""


class Job(Data):
    """Background job data."""

    uid: str
    user: 'User'
    worker: str
    state: JobState
    error: str
    numSteps: int
    step: int
    stepName: str
    payload: dict


class JobRequest(Request):
    jobUid: str


class JobStatusResponse(Response):
    jobUid: str
    state: JobState
    progress: int
    stepName: str
    output: dict


class JobManager(Node):
    """Job Manager."""

    def create_job(self, user: User, worker: type, payload: dict = None) -> Job: ...

    def get_job(self, job_uid: str, user: User = None, state: JobState = None) -> Optional[Job]: ...

    def update_job(self, job: Job, **kwargs) -> Optional[Job]: ...

    def run_job(self, job: Job) -> Optional[Job]: ...

    def cancel_job(self, job: Job) -> Optional[Job]: ...

    def remove_job(self, job: Job): ...

    def schedule_job(self, job: Job) -> Job: ...

    def require_job(self, req: 'WebRequester', p: JobRequest) -> Job: ...

    def handle_status_request(self, req: 'WebRequester', p: JobRequest) -> JobStatusResponse: ...

    def handle_cancel_request(self, req: 'WebRequester', p: JobRequest) -> JobStatusResponse: ...

    def job_status_response(self, job: Job, **kwargs) -> 'JobStatusResponse': ...
