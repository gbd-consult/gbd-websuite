class ImageFormat(Enum):
    """Image format"""

    png8 = 'png8'
    """png 8-bit"""
    png24 = 'png24'
    """png 24-bit"""


class Image:
    """Image object."""

    def size(self) -> Size: ...

    def add_box(self, color=None) -> 'Image': ...

    def add_text(self, text: str, x=0, y=0, color=None) -> 'Image': ...

    def compose(self, other: 'Image', opacity=1) -> 'Image': ...

    def crop(self, box) -> 'Image': ...

    def paste(self, other: 'Image', where=None) -> 'Image': ...

    def resize(self, size: Size, **kwargs) -> 'Image': ...

    def rotate(self, angle: int, **kwargs) -> 'Image': ...

    def to_bytes(self, mime: Optional[str] = None, options: Optional[dict] = None) -> bytes:
        """Converts the image object to bytes.

        The ``options`` dict can contain any PIL save option, prefixed with the format name,
        for example, to pass a ``compress_level`` for png, provide ``png_compress_level``.

        See https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html
        for possible save options.

        An additional option ``png_mode`` can be ``1``, ``L`` or ``P``
        (see https://pillow.readthedocs.io/en/stable/handbook/concepts.html#concept-modes).
        If provided, the image is converted to that mode before saving.

        An additional option ``jpeg_background`` sets the color
        to replace the alpha channel with (default is white).

        Args:
            mime: The mime type.
            options: A dict of options.

        Returns:
            The image as bytes.
        """

    def to_path(self, path: str, mime: Optional[str] = None, options: Optional[dict] = None) -> str:
        """Saves the image object at a given path.

        Args:
            path: Image's path location.
            mime: The mime type.
            options: A dict of options.

        Returns:
            The path to the image.
        """


    def to_array(self) -> 'numpy.typing.NDArray': ...

