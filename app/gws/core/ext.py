# Decorators

class Config:
    def __init__(self, name):
        pass

    def __call__(self, a):
        return a


class Object:
    def __init__(self, name):
        pass

    def __call__(self, a):
        return a


class Props:
    def __init__(self, name):
        pass

    def __call__(self, a):
        return a


class command:
    def __init__(self, name):
        pass

    def __call__(self, a):
        return a


# Dummy classes to support extension typing

# @formatter:off

class action:
    class Config: ...
    class Object: ...
    class Props: ...

class auth:
    class method:
        class Config: ...
        class Object: ...
        class Props: ...

    class provider:
        class Config: ...
        class Object: ...
        class Props: ...

class cli:
    class Config: ...
    class Object: ...
    class Props: ...

class template:
    class Config: ...
    class Object: ...
    class Props: ...

class db:
    class provider:
        class Config: ...
        class Object: ...
        class Props: ...

class layer:
    class Config: ...
    class Object: ...
    class Props: ...

class search:
    class provider:
        class Config: ...
        class Object: ...
        class Props: ...

class storage:
    class Config: ...
    class Object: ...
    class Props: ...

class helper:
    class Config: ...
    class Object: ...
    class Props: ...

class ows:
    class provider:
        class Config: ...
        class Object: ...
        class Props: ...

    class service:
        class Config: ...
        class Object: ...
        class Props: ...
